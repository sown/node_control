<?php defined('SYSPATH') or die('No direct script access.');

class DNSUtils {
	public static function generateNodesForwardFragment($dir, $results)
	{
		$file = "$dir/fragment.sown.org.uk-nodes";
      		$handle = fopen($file, "w");

      		if($handle == false)
      		{
            		die('Failed to open file '.$file."\n");
      		}

      		fwrite($handle, "; Nodes Fragment - Generated by Kohana scripts controller's update_dns_zones on ".date("Ymd")."\n");
      		foreach($results as $r => $result)
      		{
                        $ipv4 = DNSUtils::convertToEndpoint($result['IPv4Addr'], 4);
                        $ipv6 = DNSUtils::convertToEndpoint($result['IPv6Addr'], 6);
            		$hostname = "node".$result['boxNumber'];
            		$lat = $result['latitude'];
            		$loc = "";
            		if (!empty($lat) && floatval($lat) != 0) 
			{
                  		$lat = SOWN::decimal_to_minute_second_degrees($lat, 'latitude');
                  		$long = SOWN::decimal_to_minute_second_degrees($result['longitude'], 'longitude');
                  		$loc = "${lat[0]} ${lat[1]} ${lat[2]} ${lat[3]} ${long[0]} ${long[1]} ${long[2]} ${long[3]} 10m 100m 60m 60m";
            		}
            		$type = $result['type'];
            		if (empty($type)) $type = "unknown";
            		$txt = "\"mac:".$result['mac'].";type:$type;firmware:".$result['firmwareImage'].";\"";
            		if(strlen($hostname) > 4)
            		{
                  		if(preg_match("/[A-Za-z0-9-_]+/", $hostname))
                  		{
                        		fwrite($handle, $hostname."\tIN\tA\t".$ipv4."\n");
                        		fwrite($handle, $hostname."\tIN\tAAAA\t".$ipv6."\n");
                        		if (!empty($loc)) fwrite($handle, $hostname."\tIN\tLOC\t".$loc."\n");
					fwrite($handle, $hostname."\tIN\tTXT\t".$txt."\n");
				}
			}
		}
		fwrite($handle, ";\n");
		fclose($handle);
	}

	public static function generateNodesReverseFragment($dir, $results)
	{
		$file4 = "$dir/fragment.10.13-nodes";
		$handle4 = fopen($file4, "w");
      		$file6 = "$dir/fragment.ip6ptr-nodes";
      		$handle6 = fopen($file6, "w");
		
		if($handle4 == false)
      		{
            		die('Failed to open file '.$file6."\n");
      		}
      		if($handle6 == false)
      		{
            		die('Failed to open file '.$file6."\n");
      		}

		fwrite($handle4, "; Nodes IPv4 Reverse Fragment - Generated by Kohana scripts controller's update_dns_zones on ".date("Ymd")."\n");
      		fwrite($handle6, "; Nodes IPv6 Reverse Fragment - Generated by Kohana scripts controller's update_dns_zones on ".date("Ymd")."\n");
      		foreach ($results as $r => $result)
      		{
			$ipv4 = DNSUtils::convertToEndpoint($result['IPv4Addr'], 4);
                        $ipv6 = DNSUtils::convertToEndpoint($result['IPv6Addr'], 6);
            		$hostname = "node".$result['boxNumber'];

            		if(strlen($hostname) > 4)
            		{
                  		if(preg_match("/[A-Za-z0-9-_]+/", $hostname))
                  		{
                        		fwrite($handle4, DNSUtils::reversePTR($ipv4) . "\tPTR\t".$hostname.".sown.org.uk.\n");
                        		fwrite($handle6, DNSUtils::reverse6PTR($ipv6) . "\tPTR\t".$hostname.".sown.org.uk.\n");
                  		}	
            		}
      		}
		fwrite($handle4, ";\n");
      		fclose($handle4);
      		fwrite($handle6, ";\n");
      		fclose($handle6);
	}

	public static function generateZoneHeader($dir) 
	{
      		$handle = fopen($dir.'/db.sown.org.uk', 'w');
      		fwrite($handle, '$TTL    86400
@       IN      SOA     sown.org.uk. support.sown.org.uk. (
                 '.date('YmdH').'   ; Serial
                          86400         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                          86400 )       ; Negative Cache TTL
;

$INCLUDE "/etc/bind/fragment.sown.org.uk-hosts"
$INCLUDE "/etc/bind/fragment.sown.org.uk-nodes"
;$INCLUDE "/etc/bind/fragment.sown.org.uk-users"
;$INCLUDE "/etc/bind/fragment.sown.org.uk-streams"
');
      		fclose($handle);
	}
	
	public static function generateReverseZoneIPv4Header($dir) 
	{
		$handle = fopen($dir.'/db.10.13', 'w');
      		fwrite($handle, '$TTL    86400
@       IN      SOA     sown.org.uk. support.sown.org.uk. (
                 '.date('YmdH').'   ; Serial
                          86400         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                          86400 )       ; Negative Cache TTL
;

$INCLUDE "/etc/bind/fragment.10.13-hosts"
$INCLUDE "/etc/bind/fragment.10.13-nodes"
;$INCLUDE "/etc/bind/fragment.10.13-users"
');
      		fclose($handle);
	}

	public static function generateReverseZoneIPv6Header($dir) 
	{
      		$handle = fopen($dir.'/db.ip6ptr', 'w');
      		fwrite($handle, '$TTL    86400
@       IN      SOA     sown.org.uk. support.sown.org.uk. (
                 '.date('YmdH').'   ; Serial
                          86400         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                          86400 )       ; Negative Cache TTL
;

$INCLUDE "/etc/bind/fragment.ip6ptr-hosts"
$INCLUDE "/etc/bind/fragment.ip6ptr-nodes"
');
      		fclose($handle);
	}

	private static function reversePTR($ip)
	{
      		$realIP = long2ip(ip2long($ip));
     		$sections = preg_split("/\./", $realIP);
      		$returnValue = $sections[3] . '.' . $sections[2];
      		return $returnValue;
	}

	private static function reverse6PTR($ip, $num_sections = 8) 
	{
      		$sections = preg_split("/\:/", $ip);
      		$fill = "";
      		for ($s = sizeof($sections); $s <= 8; $s++) 
		{
      	      		$fill .= ":0000";
      		}
      		$fill .= ":";
      		$ip = str_replace("::", $fill, $ip);
      		$sections = preg_split("/\:/", $ip);
      		$sections = array_reverse($sections);
      		$digits = array();
      		$s = 0;
      		foreach($sections as $section) 
		{
            		if ($s == $num_sections) break;
           		while (strlen($section) < 4) 
			{
                  		$section = "0".$section;
            		}
            		while (strlen($section) > 0) 
			{
                  		$digits[] = substr($section, -1);
                  		$section = substr($section, 0, -1);
            		}
            		$s++;
		}
		return implode(".", $digits).".ip6.arpa.";
	}

	private static function convertToEndpoint($ip, $type = 4 ) 
	{
      		if (empty($ip) || !in_array($type, array(4,6))) return $ip;
      		if ($type == 4) 
		{
            		$ipbits = explode(".", $ip);
            		$ipbits[sizeof($ipbits)-1] = $ipbits[sizeof($ipbits)-1] + 2;
            		return implode(".", $ipbits);
      		}
      		else 
		{
            		$ipbits = explode(":", $ip);
            		$ipbits[sizeof($ipbits)-1] = dechex(hexdec($ipbits[sizeof($ipbits)-1]) + 2);
            		return implode(":", $ipbits);
      		}
      		return $ip;
	}
}
